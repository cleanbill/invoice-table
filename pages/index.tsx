import type { NextPage, GetServerSideProps } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Invoices from '../components/invoices'
import data from '../testData.json'
import Link from 'next/link'

export interface Invoice {
  invoiceDate: string,
  rsOrderNo: number,
  yourRef: string,
  invoiceNo: number,
  invoiceTotal: number
}

export enum SearchDirection {
  NONE = 'NONE',
  UP = 'UP',
  DOWN = 'DOWN'
}

const PAGE_SIZE = 10;

interface QueryParam {
  query: {
    pageNo: number,
    invoiceDate: SearchDirection,
    invoiceTotal: SearchDirection
  }
}

const regionUs = new Intl.DateTimeFormat('us', { timeZone: 'UTC' });

const sortTable = (list: Array<Invoice>, sortByDate: SearchDirection, sortByTotal: SearchDirection): Array<Invoice> => {
  if (sortByDate == SearchDirection.NONE && sortByTotal == SearchDirection.NONE) {
    return list;
  }
  if (sortByDate != SearchDirection.NONE) {
    return list.sort((a: Invoice, b: Invoice) => {
      const dateA = new Date(a.invoiceDate);
      const dateB = new Date(b.invoiceDate);

      return sortByDate == SearchDirection.UP
        ? dateA.getTime() - dateB.getTime()
        : dateB.getTime() - dateA.getTime();
    })
  }
  return list.sort((a: Invoice, b: Invoice) => {
    if (sortByTotal == SearchDirection.UP) {
      return a.invoiceTotal - b.invoiceTotal;
    }
    return b.invoiceTotal - a.invoiceTotal;
  });
}

const extractPageNo = (context: QueryParam, pageTotal: number): number => {
  const pageNoString = context?.query?.pageNo ? "" + context.query.pageNo : "1";
  try {
    const pageNo = parseInt(pageNoString);
    if (pageNo < 1) {
      return 1;
    }
    if (pageNo > pageTotal) {
      return pageTotal;
    }
    return pageNo;
  } catch (error) {
    console.error(error);
    return 1;
  }
}

const extractDateSort = (context: QueryParam): SearchDirection => {
  if (!context?.query?.invoiceDate) {
    return SearchDirection.NONE;
  }
  return context.query.invoiceDate;
}

const extractTotalSort = (context: QueryParam): SearchDirection => {
  if (!context?.query?.invoiceTotal) {
    return SearchDirection.NONE;
  }
  return context.query.invoiceTotal;
}

export const getServerSideProps = (context: QueryParam) => {

  // data being sourced from middleware and SAP
  const list = data as Array<Invoice>;
  const pageTotal = list.length / PAGE_SIZE;

  const pageNo = extractPageNo(context, pageTotal);
  const invoiceDate = extractDateSort(context);
  const invoiceTotal = extractTotalSort(context);

  const fullTable = sortTable(list, invoiceDate, invoiceTotal);

  const start = pageNo == 1 ? 0 : (pageNo * 10) - 1;
  const end = start + PAGE_SIZE;
  const table = fullTable.slice(start, end);
  console.log('from ', start, 'to', end, ' size is ', table.length);
  console.log('pageNo ', pageNo, 'invoiceDate', invoiceDate, ' invoiceTotal', invoiceTotal);


  return { props: { table, pageNo, invoiceDate, invoiceTotal, pageTotal } }
}

interface Props {
  table: Array<Invoice>,
  pageNo: number,
  invoiceDate: SearchDirection,
  invoiceTotal: SearchDirection,
  pageTotal: number
}

const Home = (props: Props) => {

  return (
    <div >
      <Head>
        <title>Invoice Table</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='ml-56 mr-56 text-center'>


        <h1 className="mb-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-blue">Invoice Table</h1>
        <p className="mb-6 text-lg font-normal text-gray-500 lg:text-xl sm:px-16 xl:px-48 dark:text-gray-400">A quick app to show how pdf can be streamed and big data can be rendered quickly using server side props</p>

        <Invoices table={props.table} pageNo={props.pageNo}></Invoices>

        <div className="table-head grid grid-cols-[1fr,10fr,1fr] m-10">
          <Link className="inline text-4xl text-orange-500" href={'?pageNo=' + (props.pageNo - 1) + '&invoiceTotal=' + props.invoiceTotal + '&invoiceDate=' + props.invoiceDate}>↓</Link>

          <div className='justify-self-center'>{props.pageNo} of {props.pageTotal} pages </div>
          <div className='justify-self-end text-4xl text-orange-500'><Link href={'?pageNo=' + (props.pageNo + 1) + '&invoiceTotal=' + props.invoiceTotal + '&invoiceDate=' + props.invoiceDate}>↑</Link>
        </div>
        </div>
      </main>

    </div>
  )
}

export default Home
